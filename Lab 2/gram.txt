grammar gram;

SEMI : ';' ;
WHILE : 'while' ;
LB : '[' ;
RB : ']' ;
IF : 'if' ;
ELSE : 'else' ;
RETURN : 'return' ;
LBR : '{' ;
RBR : '}' ;
FPNUM : ([0-9]+'.'[0-9]*|'.'[0-9]+)([Ee][-+]?[0-9]+)?|'-'?[0-9]+[Ee][-+]?[0-9]+ ;
NUM : [0-9]+ ;
OR : 'or' ;
AND : 'and' ;
NOT : 'not' ;
RELOP : '>='|'<='|'>'|'<'|'!='|'==' ;
EQ : '=' ;
PLUS : '+' ;
MULOP : [*/%] ;
MINUS : '-' ;
LP : '(' ;
RP : ')' ;
CMA : ',' ;
TYPE : ('int'|'string'|'double') ;
STRINGCONST : '"' ( '\\"' | ~["] )* '"' ;
PRINT : 'print' ;
INPUT : 'input' ;
OPEN : 'open' ;
READ : 'read' ;
WRITE : 'write' ;
CLOSE : 'close' ;
ID : [A-Za-z_][A-Za-z_0-9]* ;
WHITESPACE : ( ' ' | '\t' | '\n' | '\r' )+ -> skip;
COMMENT : '//'.*?'\n' -> skip;	//match everything within the comment, end at newline

start : program EOF ;
program : varDeclList braceblock ;
varDeclList : varDecl SEMI varDeclList | lambda ;
varDecl : TYPE ID | TYPE assign | varDeclPrime ;
varDeclPrime : TYPE ID CMA ;
stmts : stmt stmts | lambda ;
stmt : cond | loop | returnStmt SEMI | assign SEMI ;
loop : WHILE LP expr RP braceblock ;
cond : IF LP expr RP braceblock | IF LP expr RP braceblock ELSE braceblock ;
braceblock : LBR stmts RBR ;
returnStmt : RETURN expr ;
expr : orexp ;
orexp : orexp OR andexp | andexp ;
andexp : andexp AND notexp | notexp ;
notexp :  NOT notexp | rel ;
rel : sum RELOP sum | sum ;
sum :  sum PLUS term | sum MINUS term | term ;
term :  term MULOP neg | neg ;
neg :  MINUS neg | cast;
factor :  NUM | FPNUM | LP expr RP | STRINGCONST | ID ;
assign : ID EQ expr ;
funcCall : builtinFuncCall | userFuncCall ;
userFuncCall : ID LP optionalExprlist RP ;
optionalExprlist : lambda | exprlist ;
exprlist : exprlist CMA expr | expr ;
builtinFuncCall : PRINT LP expr RP | INPUT LP RP | OPEN LP expr RP | READ LP expr RP | WRITE LP expr CMA expr RP | CLOSE LP expr RP ;
cast : LP TYPE RP cast | factor;
lambda : ;